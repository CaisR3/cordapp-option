version = "0.3"

buildscript {
    ext.corda_release_group = 'net.corda'
    ext.corda_release_version = 'corda-3.0'
    ext.corda_gradle_plugins_version = '3.0.8'
    ext.kotlin_version = '1.2.20'
    ext.junit_version = '4.12'
    ext.quasar_version = '0.7.9'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
    }
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
}

apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
    main.kotlin.srcDirs += 'base/src/main/kotlin'
    main.kotlin.srcDirs += 'client/src/main/kotlin'
    main.kotlin.srcDirs += 'oracle/src/main/kotlin'
    main {
        resources {
            srcDir "config/dev"
        }
    }
    test {
        resources {
            srcDir "config/test"
        }
    }
    scenario {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/system-test/scenario/kotlin')
        }
        resources {
            srcDir 'src/system-test/scenario/resources'
        }
    }
}

configurations {
    runtime.exclude group: 'org.jolokia'

    scenarioCompile.extendsFrom testCompile
    scenarioRuntime.extendsFrom testRuntime
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$corda_release_group:corda-finance:$corda_release_version"
    cordaRuntime "$corda_release_group:corda-jackson:$corda_release_version"
    cordaRuntime "$corda_release_group:corda-rpc:$corda_release_version"
    cordaRuntime "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda-webserver-impl:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"
    cordaRuntime "$corda_release_group:corda-webserver:$corda_release_version"

    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "junit:junit:$junit_version"
    testCompile "$corda_release_group:corda-node-driver:$corda_release_version"

    cordapp "$corda_release_group:corda-finance:$corda_release_version"
    cordapp project(":base")
    cordapp project(":client")
    cordapp project(":oracle")

    // Scenarios / End-to-End Tests
//    testCompile "${corda_release_group}.behave:behave-scenario-api:${corda_release_version}"
    testCompile "${corda_release_group}.behave:behave-scenario-api:corda-4.0-snapshot"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        languageVersion = "1.2"
        apiVersion = "1.2"
        jvmTarget = "1.8"
        javaParameters = true   // Useful for reflection.
    }
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    directory "./build/nodes"
    node {
        name "O=Controller,L=London,C=GB"
        notary = [validating : true]
        p2pPort 10002
        cordapps = ["$corda_release_group:corda-finance:$corda_release_version",
                    "net.corda.option:base:$version"]
    }
    node {
        name "O=Issuer,L=London,C=GB"
        p2pPort 10005
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
        webPort 10007
        cordapps = ["$corda_release_group:corda-finance:$corda_release_version",
                    "net.corda.option:base:$version",
                    "net.corda.option:client:$version"]
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=PartyA,L=New York,C=US"
        p2pPort 10008
        rpcSettings {
            address("localhost:10009")
            adminAddress("localhost:10049")
        }
        webPort 10010
        cordapps = ["$corda_release_group:corda-finance:$corda_release_version",
                    "net.corda.option:base:$version",
                    "net.corda.option:client:$version"]
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=PartyB,L=Paris,C=FR"
        p2pPort 10011
        rpcSettings {
            address("localhost:10012")
            adminAddress("localhost:10052")
        }
        webPort 10013
        cordapps = ["$corda_release_group:corda-finance:$corda_release_version",
                    "net.corda.option:base:$version",
                    "net.corda.option:client:$version"]
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=Oracle,L=New York,C=US"
        p2pPort 10014
        rpcSettings {
            address("localhost:10015")
            adminAddress("localhost:10055")
        }
        cordapps = ["$corda_release_group:corda-finance:$corda_release_version",
                    "net.corda.option:base:$version",
                    "net.corda.option:oracle:$version"]
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
}

task scenarioJar(type: Jar, dependsOn: classes) {
    archiveName "cordapp-option-behave-test.jar"
    from sourceSets.scenario.output
}